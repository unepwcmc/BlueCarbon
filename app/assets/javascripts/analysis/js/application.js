// Generated by CoffeeScript 1.6.2
(function() {
  var _base, _base1, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.JST || (window.JST = {});

  window.JST['tabs'] = _.template("<ul class=\"tabs\">\n  <% _.each(workspace.areas, function(area, index) { %>\n    <% current_class = (area == workspace.currentArea) ? 'active' : '' %>\n    <li data-area-id=\"<%= index %>\" class=\"<%= current_class %>\"><%= area.get('name') %></li>\n  <% }); %>\n\n  <% if (workspace.areas.length < 3) { %>\n    <li id=\"add-area\">+</li>\n  <% } %>\n</ul>\n\n<div id=\"area\">\n</div>");

  window.Backbone || (window.Backbone = {});

  (_base = window.Backbone).Views || (_base.Views = {});

  Backbone.Views.TabsView = (function(_super) {
    __extends(TabsView, _super);

    function TabsView() {
      _ref = TabsView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TabsView.prototype.template = JST['tabs'];

    TabsView.prototype.events = {
      'click .tabs li': 'changeTab',
      'click #add-area': 'addArea',
      'click #delete-area': 'deleteArea'
    };

    TabsView.prototype.initialize = function(options) {
      this.currentTab = new Backbone.Diorama.ManagedRegion();
      this.workspace = window.pica.currentWorkspace;
      this.workspace.areas[0].setName('Area #1');
      return this.render();
    };

    TabsView.prototype.changeTab = function(event) {
      var area, area_index;

      area_index = $(event.target).data('area-id');
      area = this.workspace.areas[area_index];
      this.workspace.setCurrentArea(area);
      return this.render();
    };

    TabsView.prototype.addArea = function(event) {
      var area;

      if (pica.currentWorkspace.areas.length <= 3) {
        area = new Pica.Models.Area();
        area.setName("Area #" + (pica.currentWorkspace.areas.length + 1));
        this.workspace.addArea(area);
        this.workspace.setCurrentArea(area);
        return this.render();
      }
    };

    TabsView.prototype.deleteArea = function(event) {
      var area, lastArea;

      area = this.workspace.currentArea;
      this.workspace.removeArea(area);
      if (this.workspace.areas.length === 0) {
        this.addArea();
      }
      lastArea = this.workspace.areas[this.workspace.areas.length - 1];
      this.workspace.setCurrentArea(lastArea);
      return this.render();
    };

    TabsView.prototype.render = function() {
      var areaView;

      this.$el.html(this.template({
        workspace: this.workspace
      }));
      areaView = new Backbone.Views.AreaView({
        area: this.workspace.currentArea
      });
      this.currentTab.showView(areaView);
      this.$el.find('#area').html(this.currentTab.$el);
      return this;
    };

    return TabsView;

  })(Backbone.View);

  window.JST || (window.JST = {});

  window.JST['area'] = _.template("<a href=\"#\" id=\"delete-area\">Delete this area</a>\n\n<div class=\"new-polygon-container\">\n  <% if (area.polygons.length > 0) { %>\n    <a href=\"#\" class=\"btn btn-primary\" id=\"new-polygon\">Draw another polygon</a>\n  <% } else { %>\n    <a href=\"#\" class=\"btn btn-primary\" id=\"new-polygon\">Draw a polygon</a>\n  <% } %>\n</div>\n\n<table class=\"table total-stats\">\n  <thead>\n    <tr>\n      <th>Total Carbon Sequ.</th>\n      <th>Total Area</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>11600 <span>T</span></td>\n      <td>11600 <span>KM2</span></td>\n    </tr>\n  </tbody>\n</table>\n\n<table class=\"table polygon-stats\">\n  <thead>\n    <tr>\n      <th>Polygons in this area</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Habitat</td>\n      <td>Area</td>\n      <td>Carbon Seq.</td>\n    </tr>\n    <tr>\n      <td>Mangrove</td>\n      <td>200 KM</td>\n      <td>200 T</td>\n    </tr>\n    <tr>\n      <td>Mangrove</td>\n      <td>200 KM</td>\n      <td>200 T</td>\n    </tr>\n    <tr>\n      <td>Mangrove</td>\n      <td>200 KM</td>\n      <td>200 T</td>\n    </tr>\n    <tr>\n      <td>Mangrove</td>\n      <td>200 KM</td>\n      <td>200 T</td>\n    </tr>\n  </tbody>\n</table>\n\n\n<% if (area.polygons.length > 0) { %>\n  <a href=\"<%= window.pica.config.magpieUrl %>/areas_of_interest/<%= area.get('id') %>.csv\" class=\"btn btn-primary export\">Export your report</a>\n<% } %>");

  window.Backbone || (window.Backbone = {});

  (_base1 = window.Backbone).Views || (_base1.Views = {});

  Backbone.Views.AreaView = (function(_super) {
    __extends(AreaView, _super);

    function AreaView() {
      this.render = __bind(this.render, this);      _ref1 = AreaView.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    AreaView.prototype.template = JST['area'];

    AreaView.prototype.events = {
      'click #delete-area': 'deleteArea',
      'click #new-polygon': 'toggleDrawing'
    };

    AreaView.prototype.initialize = function(options) {
      this.area = options.area;
      this.area.on('sync', this.render);
      this.showAreaPolygonsView = window.pica.currentWorkspace.currentArea.newShowAreaPolygonsView();
      return this.render();
    };

    AreaView.prototype.toggleDrawing = function(event) {
      var _this = this;

      if (this.polygonView != null) {
        return this.removeNewPolygonView();
      } else {
        return this.polygonView = this.area.drawNewPolygonView(this.area, {
          success: function() {
            _this.removeNewPolygonView();
            _this.render();
            return {
              error: function(xhr, textStatus, errorThrown) {
                return alert("Can't save polygon: " + errorThrown);
              }
            };
          }
        });
      }
    };

    AreaView.prototype.removeNewPolygonView = function() {
      if (this.polygonView != null) {
        this.polygonView.close();
        return delete this.polygonViewView;
      }
    };

    AreaView.prototype.deleteArea = function(event) {};

    AreaView.prototype.render = function() {
      this.$el.html(this.template({
        area: this.area
      }));
      return this;
    };

    AreaView.prototype.onClose = function() {
      this.removeNewPolygonView();
      this.showAreaPolygonsView.close();
      return this.area.off('sync', this.render);
    };

    return AreaView;

  })(Backbone.View);

}).call(this);
